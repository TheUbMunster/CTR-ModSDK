name: Build saphi

on:
  push:
    tags:
      - '*'

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
#  build-saphi-server-linux-release:
#    permissions: write-all
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#          submodules: recursive
#      - name: build
#        run: (cd Saphi/Server && make -j $(getconf _NPROCESSORS_ONLN) server)
#      - name: compress
#        run: tar -f SaphiServer-linux-release-x64.tar.gz -c Saphi/Server/Server
#      - name: Release
#        uses: softprops/action-gh-release@v2
#        with:
#          files: SaphiServer-linux-release-x64.tar.gz
#  build-saphi-server-linux-debug:
#    permissions: write-all
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#          submodules: recursive
#      - name: build
#        run: (cd Saphi/Server && make -j $(getconf _NPROCESSORS_ONLN) server-debug)
#      - name: compress
#        run: tar -f SaphiServer-linux-debug-x64.tar.gz -c Saphi/Server/Server
#      - name: Release
#        uses: softprops/action-gh-release@v2
#        with:
#          files: SaphiServer-linux-debug-x64.tar.gz
#  build-saphi-server-windows-release:
#    permissions: write-all
#    runs-on: windows-latest
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#          submodules: recursive
#      - name: Set up MSBuild
#        uses: microsoft/setup-msbuild@v2
#      - name: Restore Nuget
#        run: nuget restore Saphi\Server\Server.sln
#      - name: build
#        run: msbuild Saphi\Server\Server.vcxproj /p:configuration=release /p:Platform=x64
#      - name: zip
#        run: Compress-Archive Saphi\Server\x64\release\ SaphiServer-windows-release-x64.zip
#      - name: Release
#        uses: softprops/action-gh-release@v2
#        with:
#          files: SaphiServer-windows-release-x64.zip
#  build-saphi-server-windows-debug:
#    permissions: write-all
#    runs-on: windows-latest
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#          submodules: recursive
#      - name: Set up MSBuild
#        uses: microsoft/setup-msbuild@v2
#      - name: Restore Nuget
#        run: nuget restore Saphi\Server\Server.sln
#      - name: build
#        run: msbuild Saphi\Server\Server.vcxproj /p:configuration=debug /p:Platform=x64
#      - name: zip
#        run: Compress-Archive Saphi\Server\x64\debug\ SaphiServer-windows-debug-x64.zip
#      - name: Release
#        uses: softprops/action-gh-release@v2
#        with:
#          files: SaphiServer-windows-debug-x64.zip
#  build-saphi-client-windows-release:
#    permissions: write-all
#    runs-on: windows-latest
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#          submodules: recursive
#      - name: Set up MSBuild
#        uses: microsoft/setup-msbuild@v2
#      - name: Restore Nuget
#        run: nuget restore Saphi\Client\Client.sln
#      - name: build
#        run: msbuild Saphi\Client\Client.vcxproj /p:configuration=release /p:Platform=x64
#      - name: copy data
#        run: |
#          mkdir Saphi\Client\x64\release\data
#          xcopy Saphi\Client\data Saphi\Client\x64\release\data /S
#      - name: zip
#        run: Compress-Archive Saphi\Client\x64\release\ SaphiClient-windows-release-x64.zip
#      - name: Release
#        uses: softprops/action-gh-release@v2
#        with:
#          files: SaphiClient-windows-release-x64.zip
#  build-saphi-client-windows-debug:
#    permissions: write-all
#    runs-on: windows-latest
#    steps:
#      - uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#          submodules: recursive
#      - name: Set up MSBuild
#        uses: microsoft/setup-msbuild@v2
#      - name: Restore Nuget
#        run: nuget restore Saphi\Client\Client.sln
#      - name: build
#        run: msbuild Saphi\Client\Client.vcxproj /p:configuration=debug /p:Platform=x64
#      - name: copy data
#        run: |
#          mkdir Saphi\Client\x64\debug\data
#          xcopy Saphi\Client\data Saphi\Client\x64\debug\data /S
#      - name: zip
#        run: Compress-Archive Saphi\Client\x64\debug\ SaphiClient-windows-debug-x64.zip
#      - name: Release
#        uses: softprops/action-gh-release@v2
#        with:
#          files: SaphiClient-windows-debug-x64.zip
  build-saphi-game:
    permissions: write-all
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'mateusfavarin/psx-modding-toolchain'
          fetch-depth: 0
          submodules: recursive
          path: 'psx-modding-toolchain'
      #- name: rename toolchain dir
      #  run:
      - name: Install toolchain deps
        run: |
          cd psx-modding-toolchain
          pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          # sudo bash install_toolchain_prebuilt.sh
          echo "about to do the mips ps1 script"
          powershell -c "& { iwr -UseBasicParsing https://raw.githubusercontent.com/grumpycoders/pcsx-redux/main/mips.ps1 | iex }"
          echo "about to mkdir"
          mkdir -p games\CTR-ModSDK
      - name: Install mips
        run: |
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")  
          mips install 13.1.0
          #setx /M path "%path%;%appdata%\mips\mips\bin"
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")  
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          path: 'psx-modding-toolchain/games/CTR-ModSDK'
      #- name: ls
      #  run: |
      #    ls -la
      #    ls -la games
      #    ls -la games/CTR-ModSDK
      # - name: Install winget
      #   uses: Cyberboss/install-winget@v1
      - name: install 7zip
        run: |
          $client = new-object System.Net.WebClient
          $client.DownloadFile("https://www.7-zip.org/a/7z2409-x64.exe","${{runner.temp}}\7zip.exe")
          & "${{runner.temp}}\7zip.exe" /S
          # winget install 7zip.7zip --silent
      # - name: install gpg
      #   run: sudo apt install gpg
      - name: download encrypted game iso
        run: |
          cd psx-modding-toolchain/games/CTR-ModSDK
          mkdir build
          cd build
          # wget ${{secrets.ISO_NTSCU_WGET_PATH}}
          #iwr "${{secrets.ISO_NTSCU_WGET_PATH}}"

          $filename = "${{secrets.ISO_NTSCU_WGET_PATH}}" -split "/" | Select-Object -Last 1
          iwr "${{secrets.ISO_NTSCU_WGET_PATH}}" -OutFile $filename

          & "C:\Program Files\7-Zip\7z.exe" x -p${{secrets.ISO_NTSCU_DECRYPT_PASSPHRASE}} ctr-u.7z
          # gpg --output ctr-u.bin --batch --passphrase '${{secrets.ISO_NTSCU_DECRYPT_PASSPHRASE}}' -d ctr-u.bin.gpg
          # rm ctr-u.bin.gpg
          echo "canonic ctr-u.bin md5 sum is                  'ab95bfca8a4bb3d90daa6519acf6e944'"
          $hashfileoutput = certutil -hashfile ctr-u.bin MD5
          $hash = ($hashfileoutput | Select-String -Pattern '([a-fA-F0-9]{32})').Matches.Groups[1].Value
          echo "downloaded and decrypted ctr-u.bin md5 sum is '$hash'"
      - name: Build xdelta
        run: |
          $env:Path = "$env:APPDATA\mips\mips\bin;" + $env:Path
          mipsel-none-elf-gcc --version
          # export PATH="$PATH:/opt/gcc-mipsel-none-elf/bin"
          # export PATH="$PATH:/opt/gcc-mipsel-none-elf/mipsel-none-elf/bin"
          cd psx-modding-toolchain\games\CTR-ModSDK\decompile
          python ..\..\..\tools\mod-builder\main.py 3 1 # extract iso
          python ..\..\..\tools\mod-builder\main.py 1 1 # compile
          python ..\..\..\tools\mod-builder\main.py 4 1 # build iso
          python ..\..\..\tools\mod-builder\main.py 5 1 # generate xdelta
          echo "ASDF"
          # ls output
          ls ..\build
          echo "JKL"
          tree .
          echo "QWER"
          tree ..\build
          echo "ERROR LOG IF EXISTS"
          cat debug\gcc_out.txt || true

# example based on my testing
#gpg --batch --passphrase 'asdfasdf' -c thingy.txt
#gpg -o thingy2.txt --passphrase 'asdfasdf' -d thingy2.txt.gpg

#  I cannot, for the life of me, get this to work

#  build-saphi-client-linux:
#    permissions: write-all
#    runs-on: ubuntu-latest
#    steps:
#      - name: setx
#        run: set -x    
#      - uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#          submodules: recursive
#      - name: install os packages
#        run: |
#          sudo apt install libsdl2-dev
#          sudo apt install libsdl2-image-dev
#          sudo apt install libzip-dev
#          sudo ldconfig
#      - name: build
#        run: |
#          g++ --version
#          (cd Saphi/Client && unset LD_LIBRARY_PATH && make -j $(getconf _NPROCESSORS_ONLN) duck)
#      - name: compress
#        run: tar -f SaphiClient-duck-linux-x64.tar.gz -c Saphi/Client/Client
#      - name: Release
#        uses: softprops/action-gh-release@v2
#        with:
#          files: SaphiClient-duck-linux-x64.tar.gz
